"""
Test suite for The Lift kata:
https://www.codewars.com/kata/the-lift
"""

import pytest

from solutions.the_lift import Dinglemouse

TESTS = [[((), (), (5, 5, 5), (), (), (), ()), 5, [0, 2, 5, 0]],
         [((), (), (1, 1), (), (), (), ()), 5, [0, 2, 1, 0]],
         [((), (3,), (4,), (), (5,), (), ()), 5, [0, 1, 2, 3, 4, 5, 0]],
         [((), (0,), (), (), (2,), (3,), ()), 5, [0, 5, 4, 3, 2, 1, 0]],
         [((3,), (2,), (0,), (2,), (), (), (5,)), 5, [0, 1, 2, 3, 6, 5, 3, 2, 0]],
         [((), (), (4, 4, 4, 4), (), (2, 2, 2, 2), (), ()), 2, [0, 2, 4, 2, 4, 2, 0]],
         [((1, 2, 3, 4), (), (), (), (), (), ()), 5, [0, 1, 2, 3, 4, 0]],
         [((3, 3, 3, 3, 3, 3), (), (), (), (), (), ()), 5, [0, 3, 0, 3, 0]],
         [((), (), (), (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1), (), (), ()), 5, [0, 3, 1, 3, 1, 3, 1, 0]],
         [((3, 3, 3, 3, 3, 3), (), (), (), (), (4, 4, 4, 4, 4, 4), ()), 5, [0, 3, 5, 4, 0, 3, 5, 4, 0]],
         [((), (0, 0, 0, 6), (), (), (), (6, 6, 0, 0, 0, 6), ()), 5, [0, 1, 5, 6, 5, 1, 0, 1, 0]],
         [((), (2,), (3, 3, 3), (1,), (), (), ()), 1, [0, 1, 2, 3, 1, 2, 3, 2, 3, 0]],
         [((), (0, 0, 0, 0), (0, 0, 0, 0), (0, 0, 0, 0), (0, 0, 0, 0), (0, 0, 0, 0), (0, 0, 0, 0)), 5, [0, 6, 5, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 0, 4, 3, 2, 1, 0, 3, 2, 1, 0, 1, 0]],
         [((2, 2), (0, 2, 3, 2), (), (0, 2, 2, 1, 0)), 2, [0, 1, 2, 3, 2, 1, 0, 1, 2, 3, 2, 1, 2, 3, 0]],
         [((3, 2, 4), (9, 10), (12, 1, 7), (7, 9, 9), (17, 5, 2, 11, 6), (2, 3, 17, 4), (4,), (17,), (12,), (3, 17), (), (12, 13), (2,), (10, 5, 3), (0, 11, 0), (3, 12, 8, 8, 6), (), (1, 4)), 3, [0, 1, 2, 3, 4, 5, 7, 8, 9, 11, 12, 17, 15, 14, 13, 12, 9, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 17, 15, 14, 13, 12, 9, 8, 6, 5, 4, 2, 3, 4, 5, 9, 11, 13, 17, 15, 14, 13, 11, 9, 6, 5, 3, 0, 4, 6, 11, 14, 13, 10, 5, 4, 0, 13, 3, 0]],
         [((6, 3), (3, 3, 3, 3, 4), (1, 3, 0, 4, 0), (), (9, 8, 8), (9, 8, 0, 4), (9,), (3,), (1, 0, 4, 4, 3), (7, 4, 0, 1)), 4, [0, 1, 2, 3, 4, 5, 6, 8, 9, 8, 7, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5, 8, 9, 8, 5, 4, 2, 1, 0, 2, 4, 8, 5, 4, 3, 0]],
         [((2,), (0, 10), (9, 8, 3, 3, 8), (7, 7), (), (2, 1, 9), (10, 7), (), (3, 1, 1, 4), (5, 2, 4, 4, 3), (7, 1)), 3, [0, 1, 2, 3, 5, 6, 8, 9, 10, 9, 8, 7, 5, 2, 1, 0, 2, 3, 5, 6, 7, 8, 9, 8, 4, 2, 5, 6, 7, 9, 10, 9, 8, 3, 1, 8, 4, 1, 0]],
         [((12,), (7, 6, 10), (9, 15, 17), (7, 0, 19, 2, 19), (17, 9, 19, 1, 7), (17, 3, 12), (14, 13, 13), (9, 0, 8, 3, 19), (), (13, 1), (15, 4, 6, 13), (3, 19, 12, 9), (7, 7), (17, 16, 4), (3, 13), (6, 5, 17, 5, 7), (2, 3, 17, 19, 12), (6, 13, 9, 2), (5, 17, 10, 10), (3, 11, 15, 1, 2)), 2, [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 15, 16, 17, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 7, 5, 4, 3, 2, 0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 14, 15, 16, 17, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 7, 6, 5, 4, 3, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 13, 15, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 7, 5, 4, 2, 1, 2, 3, 4, 5, 6, 7, 8, 11, 17, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 7, 6, 4, 3, 4, 5, 6, 7, 11, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 7, 6, 4, 5, 6, 7, 9, 11, 12, 17, 16, 15, 14, 12, 11, 9, 7, 2, 1, 4, 5, 6, 7, 19, 16, 15, 14, 12, 11, 7, 3, 2, 5, 6, 12, 17, 16, 15, 14, 12, 11, 7, 5, 0, 6, 13, 15, 14, 12, 11, 7, 5, 3, 14, 13, 12, 11, 7, 3, 11, 9, 0]],
         [((5, 2, 2, 3), (5, 7, 6, 6, 4), (3, 4), (5, 5, 6, 2), (7, 1, 7), (7,), (0, 1, 0), (3, 1, 4, 0, 1)), 4, [0, 1, 2, 3, 4, 5, 7, 6, 4, 3, 2, 1, 0, 1, 3, 4, 5, 6, 7, 6, 1, 0, 1, 3, 4, 6, 7, 0]],
         [((1, 2, 1, 1, 1), (0, 3, 3, 3), (1, 0, 0), (2,)), 1, [0, 1, 3, 2, 1, 0, 1, 2, 0, 1, 3, 2, 0, 1, 3, 0, 1, 0]],
         [((), (0, 2, 2, 2), ()), 2, [0, 1, 2, 1, 0, 1, 2, 0]],
         [((4, 3, 3, 10), (3, 13, 11, 9), (6, 10, 16, 13, 7), (1, 14, 14, 16, 5), (), (14, 12, 15, 16), (9, 8, 3, 5), (), (6, 12, 6), (6, 12, 15), (0, 16, 7, 3), (14, 9, 5), (11, 16, 8, 14, 1), (16,), (11, 15), (7, 5, 1, 11), (3, 2, 15, 13, 13), ()), 3, [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 15, 14, 12, 11, 10, 9, 8, 7, 6, 3, 2, 1, 0, 1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 13, 16, 15, 14, 13, 12, 11, 10, 9, 8, 6, 5, 1, 2, 3, 5, 6, 8, 9, 11, 12, 14, 15, 16, 15, 14, 12, 11, 10, 8, 5, 1, 0, 2, 3, 5, 6, 8, 10, 12, 13, 14, 16, 12, 10, 8, 7, 3, 1, 2, 3, 5, 6, 7, 8, 12, 15, 8, 6, 5, 6, 8, 16, 0]],
         [((2, 2), (0, 2, 0, 2, 2), (1, 0, 0, 0, 0)), 5, [0, 1, 2, 1, 0, 1, 0]],
         [((), (), (9, 5, 4, 6, 1), (), (6, 8, 2, 2, 9), (1, 2), (2, 5, 9, 2), (4,), (4, 6), (6, 6)), 2, [0, 2, 4, 5, 6, 9, 8, 7, 6, 5, 4, 2, 1, 2, 4, 6, 8, 7, 6, 5, 4, 2, 4, 8, 9, 7, 5, 4, 2, 0]],
         [((9, 12, 3, 4), (0, 12, 15), (12,), (4, 0, 13, 11, 16), (13, 8, 13, 15), (13, 10, 11, 2), (0, 0), (8, 2, 16), (14, 6, 7), (13, 15, 16, 0, 12), (5, 7, 3), (13, 13, 0, 5, 0), (9, 0, 9), (9,), (8, 3, 3, 12), (6, 10, 1), (1, 2, 10)), 3, [0, 1, 2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 3, 2, 1, 0, 1, 2, 3, 4, 5, 7, 8, 9, 11, 12, 14, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 3, 2, 1, 0, 2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 13, 12, 11, 10, 9, 8, 6, 3, 0, 3, 4, 5, 7, 9, 11, 13, 15, 16, 14, 13, 12, 11, 10, 9, 8, 7, 0, 5, 7, 9, 10, 11, 13, 12, 11, 10, 9, 5, 0, 7, 8, 9, 15, 16, 11, 10, 3, 0, 9, 12, 0]],
         [((2, 1, 4, 7), (4, 6, 7, 6), (), (4, 0, 8, 8, 4), (3, 0, 2), (3, 3, 4, 7), (5, 4), (0, 0, 0, 8), ()), 3, [0, 1, 2, 3, 4, 5, 7, 8, 7, 6, 5, 4, 3, 0, 1, 3, 6, 7, 6, 5, 4, 3, 0, 1, 3, 6, 8, 5, 4, 2, 0, 3, 4, 0]],
         [((1, 1, 2), (0,), ()), 5, [0, 1, 2, 1, 0]],
         [((1,), (14, 6, 18, 2), (6,), (17,), (13, 7, 7, 15), (16, 10), (7, 2, 9), (5, 3, 9, 12), (3, 16, 7), (), (7, 9, 4), (9,), (), (12, 0, 15, 16, 8), (0, 9), (), (7, 7, 2, 14, 12), (1,), (17,)), 4, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 13, 14, 15, 16, 18, 17, 16, 14, 13, 11, 10, 8, 7, 6, 5, 3, 2, 1, 3, 4, 5, 7, 8, 12, 13, 16, 17, 16, 14, 13, 12, 11, 10, 9, 8, 7, 6, 3, 2, 0, 4, 5, 10, 15, 16, 13, 10, 9, 8, 4, 0]],
         [((2, 7, 7, 4, 4), (6, 4, 8, 2, 4), (5,), (7, 2), (3, 7, 2), (4, 1), (7, 7, 0, 5, 3), (), (1, 2, 0)), 2, [0, 1, 2, 3, 4, 5, 6, 7, 8, 6, 5, 4, 3, 2, 1, 0, 1, 3, 4, 6, 7, 8, 6, 5, 4, 3, 0, 1, 3, 4, 6, 7, 6, 5, 4, 3, 2, 1, 3, 4, 8, 5, 4, 2, 1, 2, 3, 4, 7, 0]],
         [((4, 2, 1), (2,), (4, 0, 3), (4, 4, 4, 1), (2,)), 1, [0, 1, 2, 3, 4, 3, 2, 0, 1, 2, 3, 4, 3, 1, 0, 1, 2, 3, 4, 3, 4, 3, 4, 0]],
         [((), (4, 4, 6, 6, 7), (7,), (6,), (0, 0, 0), (), (2, 0, 1, 4, 0), ()), 2, [0, 1, 2, 3, 4, 6, 4, 2, 0, 1, 2, 3, 6, 4, 1, 0, 1, 2, 3, 7, 6, 4, 0, 3, 6, 4, 0]],
         [((2, 2), (2,), (1,)), 1, [0, 1, 2, 1, 0, 1, 2, 1, 2, 0]],
         [((5, 5), (0, 4, 3, 5), (0, 3, 1), (2, 4, 2, 4), (2,), (2,)), 4, [0, 1, 2, 3, 4, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5, 0]]]

TEST_IDs = [str(i) for i in range(1, len(TESTS) + 1)]

@pytest.mark.parametrize('queues, capacity, answer', TESTS, ids=TEST_IDs)
def test_cases(queues, capacity, answer):
    """ test """
    test_id = TESTS.index([queues, capacity, answer]) + 1
    lift = Dinglemouse(queues, capacity)
    assert lift.theLift() == answer
